<?php

namespace AppBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;

/**
 * VirksomhedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VirksomhedRepository extends EntityRepository
{
  public function getDatterSelskabReferenceList($currentVirksomhed)
  {
    $virksomheder = $this->findAll();
    $virksomhedTrail = new ArrayCollection();
    if ($currentVirksomhed instanceof Virksomhed) {
      $virksomhedTrail = $currentVirksomhed->getVirksomhedsTrail();
    }
    /** @var Virksomhed $virksomhed */
    foreach ($virksomheder as $key => $virksomhed) {
      if ($currentVirksomhed instanceof Virksomhed) {
        if ($virksomhedTrail->contains($virksomhed)) {
          unset($virksomheder[$key]);
        }

        if (!empty($virksomhed->getParent()) && $virksomhed->getParent()->getId() != $currentVirksomhed->getId()) {
          unset($virksomheder[$key]);
        }
      }
    }
    return $virksomheder;
  }

  /**
   * Cleans up bygnign references in virksomhed.
   *
   * @param Virksomhed $virksomhed
   */
  public function cleanupBygningReferences(Virksomhed $virksomhed)
  {
      $bygningRepository = $this->_em->getRepository(Bygning::class);
      // Cleanup CVR bygninger reference on Virksomhed.
      $bygningerByCvrNumber = $virksomhed->getBygningerByCvrNumber();
      /** @var Bygning $bygning */
      foreach ($bygningerByCvrNumber as $key => $bygning_id) {
          $bygning = $bygningRepository->find($bygning_id);
          if (empty($bygning) || empty($bygning->getVirksomhed())) {
              unset($bygningerByCvrNumber[$key]);
              continue;
          }
          if ($bygning->getVirksomhed()->getId() != $virksomhed->getId()) {
              unset($bygningerByCvrNumber[$key]);
          }
      }
      $virksomhed->setBygningerByCvrNumber(array_unique($bygningerByCvrNumber));

      // Cleanup EAN bygninger reference on Virksomhed.
      $bygningerByEanNumber = $virksomhed->getBygningerByEanNumber();
      foreach ($bygningerByEanNumber as $key => $bygning_id) {
          $bygning = $bygningRepository->find($bygning_id);
          if (empty($bygning) || empty($bygning->getVirksomhed())) {
              unset($bygningerByEanNumber[$key]);
              continue;
          }
          if ($bygning->getVirksomhed()->getId() != $virksomhed->getId()) {
              unset($bygningerByEanNumber[$key]);
          }
      }
      $virksomhed->setBygningerByEanNumber(array_unique($bygningerByEanNumber));

      // Cleanup P bygninger reference on Virksomhed.
      $bygningerByPNumber = $virksomhed->getBygningerByPNumber();
      foreach ($bygningerByPNumber as $key => $bygning_id) {
          $bygning = $bygningRepository->find($bygning_id);
          if (empty($bygning) || empty($bygning->getVirksomhed())) {
              unset($bygningerByPNumber[$key]);
              continue;
          }
          if ($bygning->getVirksomhed()->getId() != $virksomhed->getId()) {
              unset($bygningerByPNumber[$key]);
          }
      }
      $virksomhed->setBygningerByPNumber(array_unique($bygningerByPNumber));
  }

}
