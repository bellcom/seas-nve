<?php
/**
 * @file
 * @TODO: Missing description.
 */

namespace AppBundle\Entity;

use AppBundle\DBAL\Types\BygningStatusType;
use Doctrine\DBAL\Query\QueryBuilder;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\Query;

/**
 * RapportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RapportRepository extends BaseRepository {

  /**
   * Check if a User has edit rights to a Rapport
   *
   * @param User $user
   * @param Rapport $rapport
   * @return bool
   */
  public function canEdit(User $user, Rapport $rapport) {
    if ($rapport->getBygning()->getStatus() === BygningStatusType::TILKNYTTET_RAADGIVER) {
      return $rapport->getBygning()->getEnergiRaadgiver()->contains($user);
    }

    if ($rapport->getBygning()->getStatus() === BygningStatusType::UNDER_UDFOERSEL) {
      $bygning = $rapport->getBygning();
      return ($bygning->getProjekterende() == $user || $bygning->getAaplusAnsvarlig() == $user || $bygning->getProjektleder() == $user);
    }

    return $this->hasFullAccess($user);
  }

  /**
   * Find all Rapports that a User has access to
   *
   * @param User $user
   * @param bool $returnQuery
   * @return array|\Doctrine\ORM\Query
   */
  public function findByUser(User $user, $returnQuery = FALSE, $onlyOwnBuildings = FALSE) {
    $qb = $this->_em->createQueryBuilder();

    $qb->select('r', 'b');
    $qb->from('AppBundle:Rapport', 'r');
    $qb->leftJoin('r.bygning', 'b');
    $qb->orderBy('b.updatedAt', 'DESC');

    $this->limitQueryToUserAccess($user, $qb, $onlyOwnBuildings);

    $query = $qb->getQuery();

    return $returnQuery ? $query : $query->getResult();
  }

  /**
   * Search all Rapport that a User has access to
   *
   * @param User $user
   * @param bool $returnQuery
   * @return array|\Doctrine\ORM\Query
   */
  public function searchByUser(User $user, $search) {
    $qb = $this->_em->createQueryBuilder();

    $qb->select('r', 'b')
      ->from('AppBundle:Rapport', 'r')
      ->leftJoin('r.bygning', 'b')
      ->leftJoin('b.segment', 's');

    if (!empty($search['elena'])) {
      $qb->andWhere('r.elena = :elena')
        ->setParameter('elena', $search['elena']);
    }

    if ($search['ava'] !== NULL) {
      $qb->andWhere('r.ava = :ava')
        ->setParameter('ava', $search['ava']);
    }

    if (!empty($search['datering'])) {
      $qb->andWhere('r.datering LIKE :datering')
        ->setParameter('datering', $search['datering'] . '%');
    }

    if (!empty($search['navn'])) {
      $qb->andWhere('b.navn LIKE :navn')
        ->setParameter('navn', '%' . $search['navn'] . '%');
    }

    if (!empty($search['adresse'])) {
      $qb->andWhere('b.adresse LIKE :adresse')
        ->setParameter('adresse', '%' . $search['adresse'] . '%');
    }

    if (!empty($search['postnummer'])) {
      $qb->andWhere('b.postnummer = :postnummer')
        ->setParameter('postnummer', $search['postnummer']);
    }

    if (!empty($search['status'])) {
      $qb->andWhere('b.status = :status')
        ->setParameter('status', $search['status']);
    }

    if (!empty($search['version'])) {
      $qb->andWhere('r.version = :version')
        ->setParameter('version', $search['version']);
    }

    if (!empty($search['segment'])) {
      $qb->andWhere('b.segment = :segment')
        ->setParameter('segment', $search['segment']);
    }

    $this->limitQueryToUserAccess($user, $qb);

    $qb->addOrderBy('b.createdAt', 'desc');

    return $qb->getQuery();
  }

  /**
   * Get the Pumpetiltag for the rapport
   *
   * @param $rapport
   * @return \AppBundle\Entity\PumpeTiltag
   * @throws \Doctrine\ORM\NonUniqueResultException
   */
  public function getPumpeTiltag($rapport) {
    $qb = $this->_em->createQueryBuilder();
    $qb->select('t')
      ->from('AppBundle\Entity\Tiltag', 't')
      ->where('t INSTANCE OF AppBundle\Entity\PumpeTiltag')
      ->andWhere('t.rapport IN (:rapport)')
      ->setParameter('rapport', $rapport);

    $query = $qb->getQuery();

    return $query->getOneOrNullResult();
  }

  /**
   * Search for buildings with specific status and user
   *
   * @param \AppBundle\Entity\User $user
   * @param \AppBundle\DBAL\Types\BygningStatusType $status
   * @return \Doctrine\ORM\Query
   */
  public function getByUserAndStatus(User $user, $status, $onlyOwnBuildings = FALSE) {
    $qb = $this->_em->createQueryBuilder();

    $qb->select('r', 'b', 's');
    $qb->from('AppBundle:Rapport', 'r');
    $qb->leftJoin('r.bygning', 'b');
    $qb->leftJoin('b.segment', 's');

    $qb->where('b.status = :status')->setParameter('status', $status);
    $qb->orderBy('r.updatedAt', 'DESC');

    $this->limitQueryToUserAccess($user, $qb, $onlyOwnBuildings);

    return $qb->getQuery();
  }

  /**
   * Search for buildings with specific status and user
   *
   * @param \AppBundle\Entity\User $user
   * @param \AppBundle\DBAL\Types\BygningStatusType $status
   * @return \Doctrine\ORM\Query
   */
  public function getByUserAndStatusAfter(User $user, $status, $onlyOwnBuildings = FALSE) {
    $qb = $this->_em->createQueryBuilder();

    $qb->select('r', 'b', 's');
    $qb->from('AppBundle:Rapport', 'r');
    $qb->leftJoin('r.bygning', 'b');
    $qb->leftJoin('b.segment', 's');

    $qb->where('b.status >= :status')->setParameter('status', $status);
    $qb->orderBy('r.updatedAt', 'DESC');

    $this->limitQueryToUserAccess($user, $qb, $onlyOwnBuildings);

    return $qb->getQuery();
  }

  /**
   * Search for buildings with specific segment
   *
   * @param \AppBundle\Entity\Segment $segment
   * @return \Doctrine\ORM\Query
   */
  public function getBySegment(Segment $segment) {
    $qb = $this->_em->createQueryBuilder();

    $qb->select('r', 'b');
    $qb->from('AppBundle:Rapport', 'r');
    $qb->leftJoin('r.bygning', 'b');

    $qb->where('b.segment = :segment')->setParameter('segment', $segment);
    $qb->orderBy('r.updatedAt', 'DESC');

    return $qb->getQuery();
  }

  /**
   * @param \AppBundle\Entity\User $user
   * @param \AppBundle\DBAL\Types\BygningStatusType $status
   * @return mixed
   * @throws \Doctrine\ORM\NoResultException
   * @throws \Doctrine\ORM\NonUniqueResultException
   */
  public function getSummaryByUserAndStatus(User $user, $status) {
    $qb = $this->_em->createQueryBuilder();

    $qb->select('r', 'b');
    $qb->from('AppBundle:Rapport', 'r');
    $qb->leftJoin('r.bygning', 'b');

    $qb->addSelect('SUM(b.bruttoetageareal AS totalareal');
    $qb->addSelect('SUM(r.besparelseEl AS besparelseEl');
    $qb->addSelect('SUM(r.besparelseVarmeGUF AS besparelseVarmeGUF');
    $qb->addSelect('SUM(r.besparelseVarmeGAF AS besparelseVarmeGAF');
    $qb->addSelect('SUM(r.besparelseCO2 AS besparelseCO2');

    $qb->where('b.status = :status')->setParameter('status', $status);

    $this->limitQueryToUserAccess($user, $qb);

    return $qb->getQuery()->getSingleResult();
  }
}
