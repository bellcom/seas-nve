<?php
/**
 * @file
 * @TODO: Missing description.
 */

namespace AppBundle\Entity;

use AppBundle\DBAL\Types\BygningStatusType;
use AppBundle\Entity\RapportSektioner\RapportSektion;
use AppBundle\Entity\RapportSektioner\RapportSektionRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\DBAL\Query\QueryBuilder;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\Query;
use Gedmo\Exception\UploadableInvalidMimeTypeException;

/**
 * VirksomhedRapportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VirksomhedRapportRepository extends BaseRepository {

    /**
     * Search all Virksomhed Rapport by request params.
     *
     * @param bool $returnQuery
     * @return array|\Doctrine\ORM\Query
     */
    public function search($search) {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('vr', 'v')
            ->from('AppBundle:VirksomhedRapport', 'vr')
            ->leftJoin('vr.virksomhed', 'v')
        ;

        if (!empty($search['elena'])) {
            $qb->andWhere('vr.elena = :elena')
                ->setParameter('elena', $search['elena']);
        }

        if ($search['ava'] !== NULL) {
            $qb->andWhere('vr.ava = :ava')
                ->setParameter('ava', $search['ava']);
        }

        if (!empty($search['datering'])) {
            $qb->andWhere('vr.datering LIKE :datering')
                ->setParameter('datering', $search['datering'] . '%');
        }

        if (!empty($search['name'])) {
            $qb->andWhere('v.name LIKE :name')
                ->setParameter('name', '%' . $search['name'] . '%');
        }

        if (!empty($search['address'])) {
            $qb->andWhere('v.address LIKE :address')
                ->setParameter('address', '%' . $search['address'] . '%');
        }

        if (!empty($search['version'])) {
            $qb->andWhere('vr.version = :version')
                ->setParameter('version', $search['version']);
        }

        $qb->addOrderBy('v.id', 'desc');

        return $qb->getQuery();
    }

    /**
     * @param VirksomhedRapport $entity
     * @return ArrayCollection
     * @throws \Doctrine\Common\Annotations\AnnotationException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \ReflectionException
     */
    public function getOverviewRapportSektionerSorted(VirksomhedRapport $entity) {
        $sections = $entity->getRapportOversigtSektioner();
        $sectionTypes = RapportSektion::getRapportSektionTypes();
        $sectionsSorted = new ArrayCollection();
        foreach ($entity->getRapportOversigtSektionerStruktur() as $sectionType) {
            $className = $sectionTypes[$sectionType];
            $existing = $sections->filter(function($sektion) use ($className) {
                $class = (new \ReflectionClass($sektion))->getShortName();
                    return $class == $className;
                });
            if ($existing->count() > 0) {
                foreach ($existing as $existingSection) {
                    $sectionsSorted->add($existingSection);
                }
                continue;
            }
            /** @var RapportSektionRepository $sektionerRepository */
            $sektionRepository = $this->_em->getRepository('AppBundle:RapportSektioner\RapportSektion');
            /** @var RapportSektion $new_sektion */
            $newSection = $sektionRepository->create($sectionType);
            $newSection->setVirksomhedOversigtRapport($entity);
            $this->_em->persist($newSection);
            $this->_em->flush();
            $sectionsSorted->add($newSection);
        }
        $this->_em->persist($entity);
        $this->_em->flush();
        return $sectionsSorted;
    }
}
