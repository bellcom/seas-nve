{% extends 'AppBundle::base.html.twig' %}

{% block body -%}
  <div class="row heading">
    <div class="col-md-9">
      <h1>{{ 'virksomhed_kortlaegning.label.singular' | trans }}</h1>
    </div>
  </div>

  {{ form_start(form, { 'style': 'horizontal' }) }}
  {{ form_row(form.buttons) }}
  <div class="row">
    <div class="col-md-6">
      <div class="panel panel-default">
        <div class="panel-heading">{{ icon('industry') }} {{ 'virksomhed_kortlaegning.label.general' | trans }}</div>
        <div class="panel-body">
          {{ form_row(form.titel)}}
          {{ form_row(form.totalForbrug)}}
          {{ form_row(form.aar)}}
        </div>
      </div>

      <br><br>

      <div class="text-center">
        <canvas id="pieChart" width="400" height="400"></canvas>
      </div>
    </div>
    <div class="col-md-6">
      <div class="panel panel-default">
        <div class="panel-heading">{{ 'appbundle.virksomhedkortlaegning.slutanvendelser' | trans }}</div>
        <table class="table table-condensed results">
          <thead>
            <tr>
              <th>{{ 'appbundle.virksomhedkortlaegning.slutanvendelser.type' | trans }}</th>
              <th class="text-center">{{ 'appbundle.virksomhedkortlaegning.slutanvendelser.procent' | trans }} <span id="js-percentage-total"></span></th>
              <th class="text-center">{{ 'appbundle.virksomhedkortlaegning.slutanvendelser.forbrug' | trans }}</th>
            </tr>
          </thead>
          <tbody>
          {% for key, slutanvendelse in form.slutanvendelser %}
          <tr data-label="{{ slutanvendelser_label[key] }}">
            <td style="vertical-align: middle"><span class="js-chart-slutanvendelse-color"></span> <label class="control">{{ slutanvendelser_label[key] }}</label></td>
            <td>{{ form_widget(slutanvendelse.procent, {'attr': {'size': '5', 'class': 'js-percentage'}}) }}</td>
            <td>{{ form_widget(slutanvendelse.forbrug, {'attr': {'size': '10', 'class': 'js-usage'}}) }}</td>
          </tr>
          {% endfor %}
          </tbody>
        </table>
      </div>
    </div>
  </div>

  {{ form_rest(form) }}
  {{ form_end(form) }}

  <script>
    // Update usageField whenever percentageField is updated.
    var totalSpend = document.getElementById('appbundle_virksomhedkortlaegning_totalForbrug');
    var percentageFields = document.querySelectorAll('.js-percentage');
    var usageFields = document.querySelectorAll('.js-usage');

    function calculatePercentage(e) {
      var input = e.target;
      var total = totalSpend.value;
      var parent = input.parentElement.parentElement;
      var siblingInput = parent.querySelector('.js-usage');

      // Validate total.
      if (!total || isNaN(total)) {
        return;
      }

      // Validate percentage input.
      if (!input.value || isNaN(input.value)) {

        // Clear sibling value.
        siblingInput.value = '';

        return;
      }

      // Calculate the new amount.
      var newAmount = (parseInt(total) / 100) * parseInt(input.value);

      // Update DOM node.
      siblingInput.value = newAmount;
    }

    for(var field of percentageFields) {
      field.addEventListener('keyup', calculatePercentage);
    }
  </script>
  <script>
    var colors = [
      '#FE9029',
      '#FFDE2F',
      '#74766C',
      '#62C5D3',
      '#A7CB11',
      '#006F55',
      '#009E50',
      '#CAE070',
      '#FFEB82',
      '#99D8B9',
      '#FEA654',
      '#A1DCE5',
      '#74766C',
      '#CCECDC',
      '#A1DCE5'];

    function grabData() {
      var data = [];
      var int = 0;
      var inputFields = document.querySelectorAll('.js-percentage');

      for(var input of inputFields) {
        var parent = input.parentElement.parentElement;
        var label = parent.dataset.label;

        // Validate.
        if (!input.value || isNaN(input.value)) {
          continue;
        }

        // Push.
        data.push({
          value: parseInt(input.value),
          label: label,
          color: colors[int],
          highlight: colors[int],
        });

        int++;
      }

      return data;
    }

    // Chart.
    var options = {
      animation: false,
      segmentStrokeWidth : 1,
    };
    var data = grabData();
    var ctx = document.getElementById('pieChart').getContext('2d');
    var pieChart = new Chart(ctx).Pie(data, options);

    // Redraw chart.
    var percentageFields = document.querySelectorAll('.js-percentage');
    var usageFields = document.querySelectorAll('.js-usage');

    function redrawChart() {
      pieChart.destroy();

      var updatedData = grabData();

      pieChart = new Chart(ctx).Pie(updatedData, options);
    }

    // Total percentage.
    function calculatePercentageSum() {
      var percentageFields = document.querySelectorAll('.js-percentage');
      var sum = 0;

      for(var input of percentageFields) {

        // Validate.
        if (!input.value || isNaN(input.value)) {
          continue;
        }

        sum += parseInt(input.value);
      }

      return sum;
    }
    function setTotalPercentage() {
      var total = calculatePercentageSum();
      var percentageTotal = document.getElementById('js-percentage-total');

      percentageTotal.innerText = '(' + total + '%)';
    }

    for(var field of percentageFields) {
      field.addEventListener('keyup', redrawChart);
    }
    for(var field of percentageFields) {
      field.addEventListener('keyup', redrawChart);
    }
    for(var field of percentageFields) {
      field.addEventListener('keyup', setTotalPercentage);
    }

    // Set slutanvendelse colors.
    var colorIteration = 0;
    for(var field of percentageFields) {
      var parent = field.parentElement.parentElement;
      var colorField = parent.querySelector('.js-chart-slutanvendelse-color');

      colorField.style.backgroundColor = colors[colorIteration];

      colorIteration++;
    }

    // Initial load.
    setTotalPercentage();
  </script>

{% endblock %}
